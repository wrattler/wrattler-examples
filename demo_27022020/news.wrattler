# Monthly progress updates

## February 2020
* **Binder improvements [hosting]** - Use Dockerfile to launch Wrattler more reliably in Binder
* **AI assistants [aia]** - Supporting AI assistants in Binder-hosted Wrattler
* **AI assistants [aia]** - Revised AI assistants paper submitted to KDD
* **Improvements [use]** - Numerous improvements in AI assistants usability

## January 2020
* **Transparent data visualizations [langs]** - Data visualizations with automatic linking
* **Improvements [use]** - Improvements to support data viz in Turing paper analysis
* **Transparent data visualizations [langs]** - Further work on integrating Fluid into Wrattler

## December 2019
* **Interactive data editor [use]** - prototyping editor for manual data tweaks to support a use case
* **Transparent data visualizations [langs]** - integrating work on transparent data visualization language (Fluid project)
* **Docker improvements [hosting]** - improve Docker scripts for easier local testing of Wrattler

## November 2019
* **Initial web page [docs]** - created a minimal template for a web page at www.wrattler.org
* **Dependency graph visualizer [graph]** - expose graph to JS cells & create minimal graph visualizer
* **Testing and fixes [imports]** - support loading JS files and a number of stability improvements
* **Scenic analysis [use]** - working with a Turing data scientist on scenic analysis case study
* **BinderHub deployment [hosting]** - finally get the BinderHub deployment to work properly!

## October 2019
* **AI assistants [aia]** - working on paper submission for the ICDE conference about AI assistants
* **AI assistants [aia]** - adapted Datadiff to work as an interactive AI assistant; adapted CleverCSV to work as an interactive AI assistant; work in progress on adapting other AI assistants, especially ptype and ColNet.
* **Case studies [use]** - started working with a new data scientist in the team to adapt analysis of beauty of places, previously done in the Turing, to work in Wrattler

## September 2019
* **AI assistants [aia]** - initial work on integrating AI assistants into Wrattler, building a simple "outlier detector" assistant as an example and creating easy to use stdin/stdout API for assistants
* **Binder integration [hosting]** - Support for specifying locations of langauge runtimes and data store in order to support Binder/SageMaker proxies, exploring options for hosting using Binder

## August 2019
* **Improvements [use]** - Numerous improvements to make user experience smooth, especially inside JupyterLab, which often reloads notebooks for internal reasons. Fixed hashing of code cells to improve caching and make re-evaluation faster.
* **SageMaker [hosting]** - Investigate how to run Wrattler inside SageMaker - this can be done by running Wrattler services in Docker, but to access those from the client, we need to go via SageMaker proxy. This works for some requests, but it does not work for everything we need. We are investigating how to address the remaining issues.
* **User experience [use]** - A number of small improvements to improve user experience - for example, added "up" and "down" arrows to move cells around and added a new panel that lets users add new cells to an empty notebook.

## July 2019
* **JupyterLab improvements [hosting]** - A range of improvements to our JupyterLab intergration - reliable support for opening multiple documents in separate tabs, performance improvements to avoid flickering during editing and evaluation.
* **HTML output [use]** - Working on integrating analysis of papers published by Turing researchers. One improvement arising from this work is adding HTML output for Python and R services (so that evaluation can produce interactive charts).

## June 2019
* **Documentation [docs]** - Created infrastructure for writing documenation and added some initial documentation on how to implement custom Wrattler cell (in a way that gives the plugin author full control over the user itnerface)
* **Improvements [use]** - Working on integrating analysis of papers published by Turing researchers. As part of the work, we did various UI improvements (e.g. use Shift+Enter to evaluate and automatically rebind cells, show evaluation status using a spinner).
* **Improvements [use]** - Based on the above examples, also improved static analysis for R and Python
* **Docker scripts [hosting]** - Created release scripts for Wrattler Docker images, improvements in those

## May 2019
* **Loading files [use]** - To support upcoming use case, added support for loading reusable functions from `.py` files (and others). This can be done by putting code in separate file (supported in JupyterLab) and loading them for the whole notebook using `%global func.py` or for a single cell using `%local func.py`.
* **Infrastructure** - Added testing infrastructure and tests for Python, R and datastore services
* **Racket [langs]** - Working with Turing contributor who created a Racket programming language plugin!
* **JupyterLab [hosting]** - Make JupyterLab a part of the standard Wrattler examples by running it inside Docker, alongside of all the other Wrattler services

## April 2019
* **Arrow support [efficiency]** - Implemented new data store that supports the Arrow serialization format for more efficient (binary) transfer of data frames. This is now also supported in R and Python services, but the client still uses JSON.
* **Previews [efficiency]** - Wrattler client can now work with just previews - if the data is never fully loaded in the client (e.g. to run some JavaScript code on it), the client will only evaluate a preview.
* **JupyterLab [hosting]** - Initial version of JupyterLab integration and necessary related changes, such as restructuring Wrattler so that it can support multiple concurrently opened notbooks.

# Agreed areas of work

Work addressing needs of specific use cases

- **[use]** Supporting three concrete use cases
- **[efficiency]** Larger data frames using Arrow or Spark, efficient previews
- **[hosting]** Supporting JupyterLab and Binder
- **[docs]** Documenting public interface
- **[imports]** Better way of specifying imports

New features utilising unique Wrattler capabilities

- **[aia]** Integration of AI assistants, API for developing them
- **[refactoring]** Refactoring tools to remove dead cells, etc.
- **[langs]** Add interesting programming languages
- **[graph]** Exposing dependency graph to show provenance
